//
//  TileView.swift
//  ChatGPT5_2048
//
//  Created by Tatiana Kornilova on 21.08.2025.
//

import SwiftUI

struct TileView: View {
    let tile: Tile
    let size: CGFloat
    let spacing: CGFloat
    
    @State private var isPopping = false
    var onPopFinished: () -> Void   // callback –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–ª–∏—Ç–∫–∏

    var body: some View {
        // üìç –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–ª–∏—Ç–∫–∏ –Ω–∞ –ø–æ–ª–µ
        let tilePosition =
            CGPoint(
                x: CGFloat(tile.position.col) * (size + spacing) + size / 2,
                y: CGFloat(tile.position.row) * (size + spacing) + size / 2
            )
        
        RoundedRectangle(cornerRadius: 8)
            // üé® –¶–≤–µ—Ç –ø–ª–∏—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
            .fill(color(for: tile.value))
            .frame(width: size, height: size)
            // üìù –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å —á–∏—Å–ª–æ–º –ø–ª–∏—Ç–∫–∏
            .overlay(
                Text(tile.value, format: .number.precision(.fractionLength(0)).grouping(.never))
                    .font(.title)
                    .bold()
                    // –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: —Å–≤–µ—Ç–ª—ã–π –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —á–∏—Å–µ–ª, –±–µ–ª—ã–π –¥–ª—è –±–æ–ª—å—à–∏—Ö
                    .foregroundColor(tile.value > 4 ? .white : .black)
            )
            // üîÑ –ê–Ω–∏–º–∞—Ü–∏—è "–ø—Ä—ã–∂–∫–∞" –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –ø–ª–∏—Ç–æ–∫
           .scaleEffect(isPopping ? 1.2 : 1.0)
            .onChange(of: tile.merged) { _, merged in
                if merged {
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–ª–∏—Ç–∫–∏
                    withAnimation {
                        isPopping = true
                    }
                    completion: {
                        // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ
                        withAnimation {
                            isPopping = false
                           // tile.merged = false
                            onPopFinished()
                        }
                    }
                }
            }
            // üìç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–ª–∏—Ç–∫–∏ –Ω–∞ –ø–æ–ª–µ
            .position(tilePosition)
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–ª–∏—Ç–∫–∏
            .animation(.easeInOut(duration: 0.34), value: tile.position)
            // üé≠ –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∏—Ç–∫–∏
            .transition(
                .asymmetric(
                    insertion: .scale(scale: 0.12)
                        .combined(
                            with: .offset(
                                x: tilePosition.x - 2 * size,
                                y: tilePosition.y - 2 * size
                            )
                        ),
                    removal: .opacity
                )
            )
    }
    
    // üé® –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–ª–∏—Ç–∫–∏ –ø–æ –µ—ë –∑–Ω–∞—á–µ–Ω–∏—é
    private func color(for value: Int) -> Color {
        switch value {
        case 2: return Color(hex: "#EEE4DA") // –°–≤–µ—Ç–ª–æ-–±–µ–∂–µ–≤—ã–π
        case 4: return Color(hex: "#EDE0C8") // –ë–µ–∂–µ–≤—ã–π
        case 8: return Color(hex: "#F2B179") // –°–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        case 16: return Color(hex: "#F59563") // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        case 32: return Color(hex: "#F67C5F") // –ë–æ–ª–µ–µ —Ç—ë–º–Ω—ã–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π
        case 64: return Color(hex: "#F65E3B") // –ö—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        case 128: return Color(hex: "#EDCF72") // –ñ—ë–ª—Ç—ã–π
        case 256: return Color(hex: "#EDCC61") // –¢—ë–º–Ω–æ-–∂—ë–ª—Ç—ã–π
        case 512: return Color(hex: "#EDC850") // –ó–æ–ª–æ—Ç–æ–π
        case 1024: return Color(hex: "#EDC53F") // –¢—ë–º–Ω–æ-–∑–æ–ª–æ—Ç–æ–π
        case 2048: return Color(hex: "#EDC22E") // –Ø—Ä–∫–æ-–∑–æ–ª–æ—Ç–æ–π
        default: return Color(hex: "#CDC1B4") // –¶–≤–µ—Ç –¥–ª—è –ø—É—Å—Ç—ã—Ö –∏–ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–ª–∏—Ç–æ–∫
        }
    }
}

extension Color {
    static let colorBG = Color(hex: "#BBADA0")      // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–æ–ª—è
    static let colorEmpty = Color(hex: "#CDC1B4")   // –¶–≤–µ—Ç –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–∏
    
    // üõ† –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ü–≤–µ—Ç–∞ –∏–∑ hex-–∫–æ–¥–∞
    init(hex: String) {
        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)
        var int: UInt64 = 0
        Scanner(string: hex).scanHexInt64(&int)
        let a, r, g, b: UInt64
        switch hex.count {
        case 3: // RGB (12-–±–∏—Ç)
            (a, r, g, b) = (255, (int >> 8) * 17,
                            (int >> 4 & 0xF) * 17,
                            (int & 0xF) * 17)
        case 6: // RGB (24-–±–∏—Ç)
            (a, r, g, b) = (255,
                            int >> 16,
                            int >> 8 & 0xFF,
                            int & 0xFF)
        case 8: // ARGB (32-–±–∏—Ç)
            (a, r, g, b) = (int >> 24,
                            int >> 16 & 0xFF,
                            int >> 8 & 0xFF,
                            int & 0xFF)
        default:
            (a, r, g, b) = (255, 0, 0, 0)
        }

        self.init(
            .sRGB,
            red: Double(r) / 255,
            green: Double(g) / 255,
            blue: Double(b) / 255,
            opacity: Double(a) / 255
        )
    }
}

#Preview {
    // üîç –ü—Ä–µ–≤—å—é –ø–ª–∏—Ç–∫–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 8 –≤ –ø–æ–∑–∏—Ü–∏–∏ (0,2)
    let tile = Tile(value: 8, position: Position(row: 0, col: 2))
    TileView(tile: tile, size: 70, spacing: 8)  {  }
}

