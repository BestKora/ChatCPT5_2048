//
//  MonteCarlo.swift
//  ChatGPT5_2048
//
//  Created by Tatiana Kornilova on 16/10/2025.
//

// final class MonteCarlo : Sendable {
    struct MonteCarlo {
    /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TaskGroup)
    /// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Å–∏–º—É–ª—è—Ü–∏–π ‚Üí –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    static func bestDirection (tiles: [Tile], simulations: Int = 100, depth: Int = 20) async -> Direction? {
        var bestDirection: Direction?
        var bestScore = Int.min

        for direction in Direction.allCases {
            var totalScore: [Int] = []
            
            // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–∞—ë—Ç –ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ—Å–∫–∏
            var testCopy = Game(tiles: tiles)//GameViewModel(tiles: tiles)
            let beforeTiles = testCopy.tiles
            testCopy.move(direction: direction)
            if testCopy.tiles == beforeTiles {
                continue // ‚ùå —Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            }

            // üîÅ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await withTaskGroup /*(of: Int.self) */{ simGroup in
                for _ in 0..<simulations {
                    simGroup.addTask {
                        var simulation = Game (tiles: tiles)
                        simulation.move(direction: direction)

                        for _ in 0..<depth {
                            if simulation.gameOver { break }
                            if let randomDir = Direction.allCases.randomElement() {
                                simulation.move(direction: randomDir)
                            }
                        }
                        return simulation.score
                    }
                }

                // —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–π
                for await score in simGroup {
                    totalScore.append(score)
                }
            }

            // —Å—Ä–µ–¥–Ω–∏–π —Å—á—ë—Ç –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            let avgScore = totalScore.average()
            if avgScore > bestScore {
                bestScore = avgScore
                bestDirection = direction
            }
        }

        return bestDirection
    }
    
    /// –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã–π, –±–ª–æ–∫–∏—Ä—É—é—â–∏–π)
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ / –ø–æ–¥—Å—á—ë—Ç–æ–≤
    static func bestDirectionSync(tiles: [Tile],simulations: Int = 100, depth: Int = 15) -> Direction? {
        var bestDirection: Direction?
        var bestScore = Int.min

        for direction in Direction.allCases {
            // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–∞—ë—Ç –ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ—Å–∫–∏
            var testCopy = Game (tiles:  tiles)
            let beforeTiles = testCopy.tiles
            testCopy.move(direction: direction)
            if testCopy.tiles == beforeTiles {
                continue // ‚ùå —Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            }

            var totalScore: [Int] = []
            for _ in 0..<simulations {
                // —Å–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –∏–≥—Ä—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                var simulation = Game (tiles:  tiles)
                simulation.move(direction: direction)

                // –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ö–æ–¥—ã –≤ –≥–ª—É–±–∏–Ω—É
                for _ in 0..<depth {
                    if simulation.gameOver { break }
                    if let randomDir = Direction.allCases.randomElement() {
                        simulation.move(direction: randomDir)
                    }
                }
                totalScore.append(simulation.score)
            }

            // —Å—Ä–µ–¥–Ω–∏–π —Å—á—ë—Ç –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            let avgScore = totalScore.average()
            
            if avgScore > bestScore {
                bestScore = avgScore
                bestDirection = direction
            }
        }
        return bestDirection
    }
}

/// –£—Ç–∏–ª–∏—Ç–∞: —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª
extension Array where Element == Int {
    func average() -> Int {
        let sum = self.reduce(0, +)
        return Int(Double(sum) / Double(self.count))
    }
}
